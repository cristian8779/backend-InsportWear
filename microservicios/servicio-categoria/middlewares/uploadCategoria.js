const multer = require('multer');
const cloudinary = require('../config/cloudinary');
const { CloudinaryStorage } = require('multer-storage-cloudinary');

// Configuraci√≥n del almacenamiento en Cloudinary para categor√≠as
const storage = new CloudinaryStorage({
  cloudinary,
  params: {
    folder: 'categorias', // üìÇ Carpeta separada para im√°genes de categor√≠as
    resource_type: 'image',
    allowed_formats: ['jpg', 'png', 'jpeg', 'avif', 'webp'], // A√±adido WebP
    transformation: [
      { width: 800, height: 800, crop: 'limit' },
      { quality: 'auto' }, // Antes 'auto:best', ahora m√°s ligero
      { fetch_format: 'auto' }
    ],
  },
});

const uploadCategoria = multer({
  storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB m√°ximo
  fileFilter: (req, file, cb) => {
    console.log('üìÇ Subiendo imagen de categor√≠a:', file.originalname);
    console.log('üîç Tipo MIME recibido:', file.mimetype);

    const allowedMimeTypes = [
      'image/jpeg',
      'image/jpg',
      'image/png',
      'image/avif',
      'image/webp',
      'image/pjpeg'
    ];
    const allowedExtensions = ['jpeg', 'jpg', 'png', 'avif', 'webp'];

    // Caso de tipo MIME gen√©rico
    if (file.mimetype === 'application/octet-stream') {
      const fileExtension = file.originalname.split('.').pop().toLowerCase();
      if (allowedExtensions.includes(fileExtension)) {
        return cb(null, true);
      }
      return cb(new Error('‚ùå Formato no v√°lido: Solo se permiten im√°genes en JPG, JPEG, PNG, AVIF o WebP.'));
    }

    // Caso de tipo MIME reconocido
    if (allowedMimeTypes.includes(file.mimetype)) {
      return cb(null, true);
    }

    return cb(new Error('‚ùå Tipo de imagen no permitido. Por favor, sube archivos en formato JPG, JPEG, PNG, AVIF o WebP.'));
  },
});

module.exports = uploadCategoria;
