// utils/externalServices.js
const axios = require('axios');

// üîó Obtener productos desde microservicio
const obtenerProductos = async () => {
    try {
        const response = await axios.get(`${process.env.PRODUCTO_SERVICE_URL}/api/productos`, {
            timeout: 5000, // 5 segundos timeout
            headers: {
                'Content-Type': 'application/json'
            }
        });

        console.log('‚úÖ [Productos] Conexi√≥n exitosa al microservicio');
        
        // üîç Debug: ver qu√© estructura devuelve
        console.log('üìä [Productos] Tipo de respuesta:', typeof response.data);
        console.log('üìä [Productos] Estructura recibida:', Object.keys(response.data || {}));
        
        let productos = [];
        
        // üîß Manejar diferentes formatos de respuesta
        if (Array.isArray(response.data)) {
            // Formato: [productos...]
            productos = response.data;
        } else if (response.data && Array.isArray(response.data.productos)) {
            // Formato: { productos: [productos...] }
            productos = response.data.productos;
        } else if (response.data && Array.isArray(response.data.data)) {
            // Formato: { data: [productos...] }
            productos = response.data.data;
        } else if (response.data && response.data.items && Array.isArray(response.data.items)) {
            // Formato: { items: [productos...] }
            productos = response.data.items;
        } else {
            console.warn('‚ö†Ô∏è [Productos] Formato de respuesta no reconocido:', response.data);
            productos = [];
        }

        console.log(`‚úÖ [Productos] Respuesta procesada (${productos.length} items)`);
        return productos;

    } catch (error) {
        console.error('‚ùå [Productos] Error al conectar con microservicio:', error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.error('üîå [Productos] Microservicio no disponible en:', process.env.PRODUCTO_SERVICE_URL);
        } else if (error.code === 'ETIMEDOUT') {
            console.error('‚è±Ô∏è [Productos] Timeout al conectar con microservicio');
        }
        
        // Devolver array vac√≠o en caso de error para evitar crashes
        return [];
    }
};

// üîó Obtener categor√≠as desde microservicio
const obtenerCategorias = async () => {
    try {
        const response = await axios.get(`${process.env.CATEGORIA_SERVICE_URL}/api/categorias`, {
            timeout: 5000,
            headers: {
                'Content-Type': 'application/json'
            }
        });

        console.log('‚úÖ [Categor√≠as] Conexi√≥n exitosa al microservicio');
        
        // üîç Debug: ver qu√© estructura devuelve
        console.log('üìä [Categor√≠as] Tipo de respuesta:', typeof response.data);
        console.log('üìä [Categor√≠as] Estructura recibida:', Object.keys(response.data || {}));
        
        let categorias = [];
        
        // üîß Manejar diferentes formatos de respuesta
        if (Array.isArray(response.data)) {
            // Formato: [categorias...]
            categorias = response.data;
        } else if (response.data && Array.isArray(response.data.categorias)) {
            // Formato: { categorias: [categorias...] }
            categorias = response.data.categorias;
        } else if (response.data && Array.isArray(response.data.data)) {
            // Formato: { data: [categorias...] }
            categorias = response.data.data;
        } else if (response.data && response.data.items && Array.isArray(response.data.items)) {
            // Formato: { items: [categorias...] }
            categorias = response.data.items;
        } else {
            console.warn('‚ö†Ô∏è [Categor√≠as] Formato de respuesta no reconocido:', response.data);
            categorias = [];
        }

        console.log(`‚úÖ [Categor√≠as] Respuesta procesada (${categorias.length} items)`);
        return categorias;

    } catch (error) {
        console.error('‚ùå [Categor√≠as] Error al conectar con microservicio:', error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.error('üîå [Categor√≠as] Microservicio no disponible en:', process.env.CATEGORIA_SERVICE_URL);
        } else if (error.code === 'ETIMEDOUT') {
            console.error('‚è±Ô∏è [Categor√≠as] Timeout al conectar con microservicio');
        }
        
        // Devolver array vac√≠o en caso de error para evitar crashes
        return [];
    }
};

// üß™ Funci√≥n de prueba para verificar microservicios
const probarMicroservicios = async () => {
    console.log('üß™ Probando conexi√≥n a microservicios...');
    
    try {
        const [productos, categorias] = await Promise.all([
            obtenerProductos(),
            obtenerCategorias()
        ]);
        
        console.log(`üìä Productos disponibles: ${productos.length}`);
        console.log(`üìä Categor√≠as disponibles: ${categorias.length}`);
        
        // Mostrar algunos ejemplos si hay datos
        if (productos.length > 0) {
            console.log('üì¶ Ejemplo de producto:', {
                id: productos[0]._id || productos[0].id,
                nombre: productos[0].nombre || productos[0].name || 'Sin nombre'
            });
        }
        
        if (categorias.length > 0) {
            console.log('üìÅ Ejemplo de categor√≠a:', {
                id: categorias[0]._id || categorias[0].id,
                nombre: categorias[0].nombre || categorias[0].name || 'Sin nombre'
            });
        }
        
    } catch (error) {
        console.error('‚ùå Error al probar microservicios:', error.message);
    }
};

module.exports = {
    obtenerProductos,
    obtenerCategorias,
    probarMicroservicios
};